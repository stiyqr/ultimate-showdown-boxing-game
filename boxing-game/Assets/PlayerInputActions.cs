//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""a9ef0f5b-882f-4373-842a-60832eab08d7"",
            ""actions"": [
                {
                    ""name"": ""Dodge_L"",
                    ""type"": ""Button"",
                    ""id"": ""9141d74d-d87c-46f5-8ff1-dcff0cea10e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge_R"",
                    ""type"": ""Button"",
                    ""id"": ""dd4a34b4-1414-4115-9a0e-c5b4ff92dba6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Punch_L"",
                    ""type"": ""Button"",
                    ""id"": ""dfd5f5fb-175e-4809-b3b9-0dfbd7bf2fe7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Punch_R"",
                    ""type"": ""Button"",
                    ""id"": ""8101344a-9fd6-4250-bdfa-b3ad5001c469"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Guard"",
                    ""type"": ""Button"",
                    ""id"": ""a69d3517-50b0-4081-802b-9df20550b760"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""43ac1fc3-f672-4a89-815f-23e559c90ae1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8e9df574-cee9-46c7-a491-5c87186ae9cd"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge_L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a25a2636-e77a-46a8-9868-973fe3e92b90"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge_R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68a622fb-f660-4eaf-8fc2-00281d3d2671"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch_L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26a1bae4-030d-49f8-a9e8-14459f217949"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch_R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e743cc34-13bd-4ce7-b0d1-59e3b4f49f39"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Guard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""642fa40a-32ec-4236-85d5-d7008e72eeb4"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Dodge_L = m_Player.FindAction("Dodge_L", throwIfNotFound: true);
        m_Player_Dodge_R = m_Player.FindAction("Dodge_R", throwIfNotFound: true);
        m_Player_Punch_L = m_Player.FindAction("Punch_L", throwIfNotFound: true);
        m_Player_Punch_R = m_Player.FindAction("Punch_R", throwIfNotFound: true);
        m_Player_Guard = m_Player.FindAction("Guard", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Dodge_L;
    private readonly InputAction m_Player_Dodge_R;
    private readonly InputAction m_Player_Punch_L;
    private readonly InputAction m_Player_Punch_R;
    private readonly InputAction m_Player_Guard;
    private readonly InputAction m_Player_Pause;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Dodge_L => m_Wrapper.m_Player_Dodge_L;
        public InputAction @Dodge_R => m_Wrapper.m_Player_Dodge_R;
        public InputAction @Punch_L => m_Wrapper.m_Player_Punch_L;
        public InputAction @Punch_R => m_Wrapper.m_Player_Punch_R;
        public InputAction @Guard => m_Wrapper.m_Player_Guard;
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Dodge_L.started += instance.OnDodge_L;
            @Dodge_L.performed += instance.OnDodge_L;
            @Dodge_L.canceled += instance.OnDodge_L;
            @Dodge_R.started += instance.OnDodge_R;
            @Dodge_R.performed += instance.OnDodge_R;
            @Dodge_R.canceled += instance.OnDodge_R;
            @Punch_L.started += instance.OnPunch_L;
            @Punch_L.performed += instance.OnPunch_L;
            @Punch_L.canceled += instance.OnPunch_L;
            @Punch_R.started += instance.OnPunch_R;
            @Punch_R.performed += instance.OnPunch_R;
            @Punch_R.canceled += instance.OnPunch_R;
            @Guard.started += instance.OnGuard;
            @Guard.performed += instance.OnGuard;
            @Guard.canceled += instance.OnGuard;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Dodge_L.started -= instance.OnDodge_L;
            @Dodge_L.performed -= instance.OnDodge_L;
            @Dodge_L.canceled -= instance.OnDodge_L;
            @Dodge_R.started -= instance.OnDodge_R;
            @Dodge_R.performed -= instance.OnDodge_R;
            @Dodge_R.canceled -= instance.OnDodge_R;
            @Punch_L.started -= instance.OnPunch_L;
            @Punch_L.performed -= instance.OnPunch_L;
            @Punch_L.canceled -= instance.OnPunch_L;
            @Punch_R.started -= instance.OnPunch_R;
            @Punch_R.performed -= instance.OnPunch_R;
            @Punch_R.canceled -= instance.OnPunch_R;
            @Guard.started -= instance.OnGuard;
            @Guard.performed -= instance.OnGuard;
            @Guard.canceled -= instance.OnGuard;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnDodge_L(InputAction.CallbackContext context);
        void OnDodge_R(InputAction.CallbackContext context);
        void OnPunch_L(InputAction.CallbackContext context);
        void OnPunch_R(InputAction.CallbackContext context);
        void OnGuard(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
